service:
  name: products-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true


plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-offline


provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    PRODUCT_TABLE: Products-${self:provider.stage}

  custom:
    serverless-offline:
      port: 3003

    dynamodb:
      start:
        port: 8000
        inMemory: true
        migrate: true



functions:
  hello:
    handler: src/lambda/createProduct.handler
    events:
      - http:
          method: post
          path: products
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt ProductsDynamoDBTable.Arn


resources:
  Resoures:

    ProductsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PRODUCT_TABLE}


