service:
  name: products-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  documentation:
    api:
      info:
        version: 1.0.0
        title: products-service
        description: serverless service for products
    models:
      - name: CreateProductRequest
        contentType: application/json
        schema: ${file(validator/create-product-request.json)}


plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-offline


provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    PRODUCT_TABLE: Products-${self:provider.stage}
    PRODUCTS_IMAGES_BUCKET: products-images-ufp-${self:provider.stage}

  custom:
    serverless-offline:
      port: 3003

    dynamodb:
      start:
        port: 8000
        inMemory: true
        migrate: true
      stages:
        - dev


functions:
  CreateProduct:
    handler: src/lambda/createProduct.handler
    events:
      - http:
          method: post
          path: products
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new product
            description: Create a new product
            requestModels:
              'application/json': CreateProductRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt ProductsDynamoDBTable.Arn
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.PRODUCTS_IMAGES_BUCKET}/*


resources:
  Resources:

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ProductsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: companyId
            AttributeType: S
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: companyId
            KeyType: HASH
          - AttributeName: productId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PRODUCT_TABLE}

    ProductsImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PRODUCTS_IMAGES_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ProductsImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ProductsImagesBucket
        PolicyDocument:
          {
            "Version": "2008-10-17",
            "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::${self:provider.environment.PRODUCTS_IMAGES_BUCKET}/*"
            }
            ]
          }


